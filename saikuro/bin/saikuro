#!/usr/bin/env ruby
# $Id$
# Version 0.2
# == Usage
#
# saikuro [ -h ] [-o output_directory] [-f type] [ -c, -t ]
# [ -y, -w, -e, -k, -s, -d - number ] ( -p file | -i directory )
#
# == Help
#
# -o, --output_directory (directory) : A directory to ouput the results in.
# The current directory is used if this option is not passed.
#
# -h, --help : This help message.
#
# -f, --formater (html | text) : The format to output the results in.
# The default is html
#
# -c, --cyclo : Compute the cyclomatic complexity of the input.
#
# -t, --token : Count the number of tokens per line of the input.
#
# -y, --filter_cyclo (number) : Filter the output to only include methods
# whose cyclomatic complexity are greater than the passed number.
#
# -w, --warn_cyclo (number) : Highlight with a warning methods whose
# cyclomatic complexity are greather than or equal to the passed number.
#
#
# -e, --error_cyclo (number) : Highligh with an error methods whose
# cyclomatic complexity are greather than or equal to the passed number.
#
#
# -k, --filter_token (number) : Filter the output to only include lines
# whose token count are greater than the passed number.
#
#
# -s, --warn_token (number) : Highlight with a warning lines whose
# token count are greater than or equal to the passed number.
#
#
# -d, --error_token (number) : Highlight with an error lines whose
# token count are greater than or equal to the passed number.
#
#
# -p, --parse_file (file) : A file to use as input.
#
# -i, --input_directory (directory) : All ruby files found recursively
# inside the directory are passed as input.

# == License
# Saikruo uses the BSD license.
#
# Copyright (c) 2005, Ubiquitous Business Technology (http://ubit.com)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#    * Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#    * Neither the name of Ubiquitous Business Technology nor the names
#      of its contributors may be used to endorse or promote products
#      derived from this software without specific prior written
#      permission.
#
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# == Author
# Zev Blut (zb@ubit.com)

require 'saikuro'

class SaikuroCMDLineRunner
  require 'stringio'
  require 'getoptlong'
  require 'fileutils'
  require 'find'
  require 'rdoc/usage'

  include ResultIndexGenerator

  def get_ruby_files(path)
    files = Array.new
    Find.find(path) do |f|
      if !FileTest.directory?(f)
	if f =~ /rb$/
	  files<< f
	end
      end
    end
    files
  end

  def run
    files = Array.new
    output_dir = "./"
    formater = "html"
    state_filter = Filter.new(5)
    token_filter = Filter.new(10, 25, 50)
    comp_state = comp_token = false
    begin
      opt = GetoptLong.new(
                           ["-o","--output_directory", GetoptLong::REQUIRED_ARGUMENT],
                           ["-h","--help", GetoptLong::NO_ARGUMENT],
                           ["-f","--formater", GetoptLong::REQUIRED_ARGUMENT],
                           ["-c","--cyclo", GetoptLong::NO_ARGUMENT],
                           ["-t","--token", GetoptLong::NO_ARGUMENT],
                           ["-y","--filter_cyclo", GetoptLong::REQUIRED_ARGUMENT],
                           ["-k","--filter_token", GetoptLong::REQUIRED_ARGUMENT],
                           ["-w","--warn_cyclo", GetoptLong::REQUIRED_ARGUMENT],
                           ["-s","--warn_token", GetoptLong::REQUIRED_ARGUMENT],
                           ["-e","--error_cyclo", GetoptLong::REQUIRED_ARGUMENT],
                           ["-d","--error_token", GetoptLong::REQUIRED_ARGUMENT],
                           ["-p","--parse_file", GetoptLong::REQUIRED_ARGUMENT],
                           ["-i","--input_directory", GetoptLong::REQUIRED_ARGUMENT],
                           ["-v","--verbose", GetoptLong::NO_ARGUMENT]
                           )

      opt.each do |arg,val|
        case arg
        when "-o"
          output_dir = val
        when "-h"
          RDoc.usage('help')
        when "-f"
          formater = val
        when "-c"
          comp_state = true
        when "-t"
          comp_token = true
        when "-k"
          token_filter.limit = val.to_i
        when "-s"
          token_filter.warn = val.to_i
        when "-d"
          token_filter.error = val.to_i
        when "-y"
          state_filter.limit = val.to_i
        when "-w"
          state_filter.warn = val.to_i
        when "-e"
          state_filter.error = val.to_i
        when "-p"
          files<< val
        when "-i"
          files.concat(get_ruby_files(val))
        when "-v"
          STDOUT.puts "Verbose mode on"
          $VERBOSE = true
        end

      end
      RDoc.usage if !comp_state && !comp_token
    rescue => err
      RDoc.usage
    end

    if formater =~ /html/i
      state_formater = StateHTMLComplexityFormater.new(STDOUT,state_filter)
      token_count_formater = HTMLTokenCounterFormater.new(STDOUT,token_filter)
    else
      state_formater = ParseStateFormater.new(STDOUT,state_filter)
      token_count_formater = TokenCounterFormater.new(STDOUT,token_filter)
    end

    state_formater = nil if !comp_state
    token_count_formater = nil if !comp_token

    idx_states, idx_tokens = Saikuro.analyze(files,
                                             state_formater,
                                             token_count_formater,
                                             output_dir)

    write_cyclo_index(idx_states, output_dir)
    write_token_index(idx_tokens, output_dir)
  end

end

SaikuroCMDLineRunner.new.run

